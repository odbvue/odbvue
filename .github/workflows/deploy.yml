name: Deploy OdbVue

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  deploy-adb:
    name: Deploy ADB to OCI
    runs-on: ubuntu-latest
    
    env:
      VERSION: ${{ github.ref_name }}
      NAME: odbvue-db
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SQLcl
        uses: gvenzl/setup-oracle-sqlcl@v1
        with:
          version: latest

      - name: Restore ADB wallet
        env:
          ADB_WALLET_BASE64: ${{ secrets.ADB_WALLET_BASE64 }}
          ADB_WALLET_PASSWORD: ${{ secrets.ADB_WALLET_PASSWORD }}
        run: |
          mkdir -p "$RUNNER_TEMP/wallet"
          echo "$ADB_WALLET_BASE64" | base64 -d > "$RUNNER_TEMP/wallet.zip"
          unzip -P "$ADB_WALLET_PASSWORD" -q "$RUNNER_TEMP/wallet.zip" -d "$RUNNER_TEMP/wallet"
          echo "TNS_ADMIN=$RUNNER_TEMP/wallet" >> $GITHUB_ENV

      - name: Build artifact
        working-directory: db
        run: |
          sql /nolog <<'SQL'
          set sqlclui off
          project gen-artifact -name ${NAME} -version ${VERSION} -format zip
          exit
          SQL
          ls -l artifact
          echo "ARTIFACT_ZIP=artifact/${NAME}-${VERSION}.zip" >> "$GITHUB_ENV"

      - name: Smoke test ADB connection
        env:
          ADB_USER: ${{ secrets.ADB_USER }}
          ADB_PASSWORD: ${{ secrets.ADB_PASSWORD }}
          ADB_TNS_ALIAS: ${{ secrets.ADB_TNS_ALIAS }}
        run: |
          sql -cloudconfig "$RUNNER_TEMP/wallet" \
              "${ADB_USER}/${ADB_PASSWORD}@${ADB_TNS_ALIAS}" \
              "SELECT 'connected as '||USER whoami FROM dual;"

      - name: Deploy artifact
        working-directory: db
        env:
          ADB_USER: ${{ secrets.ADB_USER }}
          ADB_PASSWORD: ${{ secrets.ADB_PASSWORD }}
          ADB_TNS_ALIAS: ${{ secrets.ADB_TNS_ALIAS }}
        run: |
          sql -cloudconfig "$RUNNER_TEMP/wallet" \
              "${ADB_USER}/${ADB_PASSWORD}@${ADB_TNS_ALIAS}" <<'SQL'
          set sqlclui off
          project deploy -file ${ARTIFACT_ZIP}
          exit
          SQL

  build-web:
    name: Build Web Applications
    needs: deploy-adb
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: 'apps/pnpm-lock.yaml'
      
      - name: Install dependencies
        run: cd apps && pnpm install --frozen-lockfile
      
      - name: Build Vue app
        run: cd apps && pnpm build
      
      - name: Build VitePress wiki
        run: cd apps && pnpm wiki:build
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            apps/dist
            apps/.vitepress/dist
          retention-days: 1
      
      - name: Reorganize artifacts for deployment
        run: |
          mkdir -p build-artifacts/apps
          mkdir -p build-artifacts/wiki
          mkdir -p build-artifacts/main
          cp -r apps/dist/* build-artifacts/apps/ || true
          cp -r apps/.vitepress/dist/* build-artifacts/wiki/ || true
          cp -r main/* build-artifacts/main/ || true
      
      - name: Upload reorganized artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-reorganized
          path: build-artifacts/
          retention-days: 1
          
  deploy-web:
    name: Deploy Web to OCI
    needs: build-web
    runs-on: ubuntu-latest
    
    env:
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-reorganized
          path: build-artifacts
      
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          echo "${{ secrets.SSH_HOST_KEY }}" >> ~/.ssh/known_hosts
      
      - name: Copy deployment scripts to remote
        run: |
          scp -i ~/.ssh/deploy_key -r i13e/oci/basic/scripts/* \
            ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:/tmp/deploy-scripts/
      
      - name: Copy built artifacts to remote
        run: |
          DEPLOY_DIR="/tmp/deployer-artifacts"
          ssh -i ~/.ssh/deploy_key ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "mkdir -p $DEPLOY_DIR/apps $DEPLOY_DIR/wiki $DEPLOY_DIR/main"
          scp -i ~/.ssh/deploy_key -r build-artifacts/apps/* ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:$DEPLOY_DIR/apps/
          scp -i ~/.ssh/deploy_key -r build-artifacts/wiki/* ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:$DEPLOY_DIR/wiki/
          scp -i ~/.ssh/deploy_key -r build-artifacts/main/* ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:$DEPLOY_DIR/main/
      
      - name: Create sites.yaml with correct absolute paths
        run: |
          cat > /tmp/sites.yaml << 'EOF'
          sites:
            - site_name: "main"
              domain: "odbvue.com"
              remote_path: "/var/www/main/"
              local_path: "/tmp/deployer-artifacts/main"
            - site_name: "apps"
              domain: "apps.odbvue.com"
              remote_path: "/var/www/apps/"
              local_path: "/tmp/deployer-artifacts/apps"
            - site_name: "wiki"
              domain: "wiki.odbvue.com"
              remote_path: "/var/www/wiki/"
              local_path: "/tmp/deployer-artifacts/wiki"
          ssl:
            cert_file: "./.ssl/STAR.odbvue.com.crt"
            key_file: "./.ssl/STAR.odbvue.com_key.txt"
            ca_bundle_file: "./.ssl/STAR.odbvue.com.ca-bundle"
          EOF
          scp -i ~/.ssh/deploy_key /tmp/sites.yaml ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:/tmp/deploy-scripts/sites.yaml
      
      - name: Execute deployment
        run: |
          ssh -i ~/.ssh/deploy_key ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "cd /tmp/deploy-scripts && bash deploy.sh 2>&1"
      
      - name: Verify deployment
        run: |
          ssh -i ~/.ssh/deploy_key ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "sudo systemctl status nginx"
      
      - name: Cleanup SSH key
        if: always()
        run: rm -f ~/.ssh/deploy_key
