name: Deploy OdbVue

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'  # Matches v1.0.0, v1.5.2, etc.

jobs:
  build:
    name: Build Applications
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: 'apps/pnpm-lock.yaml'
      
      - name: Install dependencies
        run: cd apps && pnpm install --frozen-lockfile
      
      - name: Build Vue app
        run: cd apps && pnpm build
      
      - name: Build VitePress wiki
        run: cd apps && pnpm wiki:build
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            apps/dist
            apps/.vitepress/dist
          retention-days: 1

  deploy:
    name: Deploy to OCI
    needs: build
    runs-on: ubuntu-latest
    
    env:
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      DEPLOY_KEY_FILE: '/tmp/deploy_key'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build-artifacts
      
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          echo "${{ secrets.SSH_HOST_KEY }}" >> ~/.ssh/known_hosts
      
      - name: Copy deployment scripts to remote
        run: |
          scp -i ~/.ssh/deploy_key -r i13e/oci/basic/scripts/* \
            ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:~/deploy/
      
      - name: Copy built artifacts to remote
        run: |
          # Create directories on remote
          ssh -i ~/.ssh/deploy_key ${{ env.SSH_USER }}@${{ env.SSH_HOST }} \
            "mkdir -p ~/build-artifacts"
          
          # Copy artifacts
          scp -i ~/.ssh/deploy_key -r build-artifacts/dist \
            ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:~/build-artifacts/apps
          
          scp -i ~/.ssh/deploy_key -r build-artifacts/.vitepress/dist \
            ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:~/build-artifacts/wiki
          
          # Copy main site (static files)
          scp -i ~/.ssh/deploy_key -r main \
            ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:~/build-artifacts/
      
      - name: Copy sites.yaml to remote
        run: |
          scp -i ~/.ssh/deploy_key i13e/oci/basic/scripts/sites.yaml \
            ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:~/deploy/sites.yaml
      
      - name: Execute deployment
        run: |
          ssh -i ~/.ssh/deploy_key ${{ env.SSH_USER }}@${{ env.SSH_HOST }} \
            "cd ~/deploy && bash deploy.sh 2>&1"
      
      - name: Verify deployment
        run: |
          ssh -i ~/.ssh/deploy_key ${{ env.SSH_USER }}@${{ env.SSH_HOST }} \
            "echo 'Checking nginx status...' && sudo systemctl status nginx"
      
      - name: Cleanup SSH key
        if: always()
        run: rm -f ~/.ssh/deploy_key
