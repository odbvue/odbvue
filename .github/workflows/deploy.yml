name: Deploy
on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to deploy (e.g., v1.2.3)"
        required: true
        type: string
  workflow_run:
    workflows: ["Build & Package on Tag"]
    types: [completed]

concurrency:
  group: deploy-${{ inputs.tag }}
  cancel-in-progress: false

jobs:
  fetch-bundle:
    runs-on: ubuntu-latest
    outputs:
      bundle_path: ${{ steps.set-path.outputs.path }}
      tag: ${{ steps.get-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Get tag
        id: get-tag
        run: |
          if [ -n "${{ inputs.tag }}" ]; then
            TAG="${{ inputs.tag }}"
          else
            TAG="${{ github.event.workflow_run.head_branch }}"
          fi
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
      - name: Download bundle from Build workflow
        uses: actions/download-artifact@v4
        with:
          name: release-bundle
          path: bundle
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
      - name: Set bundle path
        id: set-path
        run: echo "path=bundle/release-${{ steps.get-tag.outputs.tag }}.tar.gz" >> "$GITHUB_OUTPUT"

  deploy-db:
    needs: fetch-bundle
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: gvenzl/setup-oracle-sqlcl@v1
      - name: Restore ADB wallet
        run: |
          set -euo pipefail
          mkdir -p "$RUNNER_TEMP/wallet"
          printf %s "${{ secrets.ADB_WALLET_BASE64 }}" | base64 -d > "$RUNNER_TEMP/wallet.zip"
          unzip -P "${{ secrets.ADB_WALLET_PASSWORD }}" -q "$RUNNER_TEMP/wallet.zip" -d "$RUNNER_TEMP/wallet"
          echo "TNS_ADMIN=$RUNNER_TEMP/wallet" >> $GITHUB_ENV
      - name: Extract DB artifact
        run: |
          set -euo pipefail
          mkdir -p bundle
          tar -xzf "${{ needs.fetch-bundle.outputs.bundle_path }}" -C bundle
          echo "ART=bundle/db/odbvue-db-${{ needs.fetch-bundle.outputs.tag }}.zip" >> $GITHUB_ENV
      - name: Smoke test ADB connection
        env:
          ADB_USER: ${{ secrets.ADB_USER }}
          ADB_PASSWORD: ${{ secrets.ADB_PASSWORD }}
          ADB_TNS_ALIAS: ${{ secrets.ADB_TNS_ALIAS }}
        run: |
          set -euo pipefail
          sql "${ADB_USER}/${ADB_PASSWORD}@${ADB_TNS_ALIAS}" <<'SQL'
          SELECT 'connected as '||USER whoami FROM dual;
          exit
          SQL
      - name: Deploy DB artifact
        env:
          ADB_USER: ${{ secrets.ADB_USER }}
          ADB_PASSWORD: ${{ secrets.ADB_PASSWORD }}
          ADB_TNS_ALIAS: ${{ secrets.ADB_TNS_ALIAS }}
        run: |
          set -euo pipefail
          sql "${ADB_USER}/${ADB_PASSWORD}@${ADB_TNS_ALIAS}" <<SQL
          set sqlclui off
          project deploy -file "$ART"
          exit
          SQL

  deploy-web:
    needs: [fetch-bundle, deploy-db]
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          printf %s "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          printf %s "${{ secrets.SSH_HOST_KEY }}" >> ~/.ssh/known_hosts
      - name: Extract bundle
        run: |
          set -euo pipefail
          mkdir -p bundle
          tar -xzf "${{ needs.fetch-bundle.outputs.bundle_path }}" -C bundle
      - name: Upload via rsync (atomic)
        run: |
          set -euo pipefail
          REL="/var/www/releases/${{ needs.fetch-bundle.outputs.tag }}"
          ssh -i ~/.ssh/deploy_key ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p '$REL'"
          rsync -az -e "ssh -i ~/.ssh/deploy_key" --delete bundle/apps/  ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:"$REL/apps/"
          rsync -az -e "ssh -i ~/.ssh/deploy_key" --delete bundle/wiki/  ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:"$REL/wiki/"
          rsync -az -e "ssh -i ~/.ssh/deploy_key" --delete bundle/main/  ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:"$REL/main/"
          ssh -i ~/.ssh/deploy_key ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "\
            ln -sfn '$REL/apps' /var/www/apps && \
            ln -sfn '$REL/wiki' /var/www/wiki && \
            ln -sfn '$REL/main' /var/www/main && \
            sudo nginx -t && sudo systemctl reload nginx"
