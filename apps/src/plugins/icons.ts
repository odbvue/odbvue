import { promises as fs } from 'node:fs'
import type { Plugin, ResolvedConfig } from 'vite'

type AutoImportMdiIconsOptions = {
  dirs?: string[]
  exts?: string[]
  pattern?: string
  outputPath?: string
  outputFile?: string
  log?: boolean
}

export function AutoImportMdiIcons(options?: AutoImportMdiIconsOptions): Plugin {
  let config: ResolvedConfig
  const dirs: string[] = options?.dirs || ['./src']
  const exts: string[] = options?.exts || ['.vue', '.ts', '.md']
  const pattern = options?.pattern || '$mdi'
  const outputPath = options?.outputPath || './src/themes/'
  const outputFile = options?.outputFile || 'icons.ts'
  const log = options?.log || true

  function pluginLogger(message: string): void {
    if (!log) return
    const date = new Date()
    const time = date.toLocaleTimeString('en-US', {
      hour: 'numeric',
      minute: '2-digit',
      second: '2-digit',
      hour12: true,
    })
    console.log(
      '\x1b[90m' +
        time +
        '\x1b[0m' +
        '\x1b[36m' +
        ' [Auto Import MDI Icons] ' +
        '\x1b[0m' +
        message,
    )
  }

  async function autoImportVuetifyMdiIcons(sourcePath: string, destinationPath: string) {
    if (sourcePath == destinationPath) return
    if (
      !exts.some((ext) => sourcePath.endsWith(ext)) ||
      !dirs.some((dir) => sourcePath.includes(dir.replace('./', '/')))
    )
      return
    try {
      const sourceContent = await fs.readFile(sourcePath, 'utf-8')
      if (sourceContent.includes(pattern)) {
        try {
          const newRegex = new RegExp(`\\${pattern}[a-zA-Z0-9]+`, 'g')
          const newIcons = sourceContent.match(newRegex)
          if (newIcons && newIcons.length > 0) {
            let existingIcons: string[] = []
            try {
              const existingContent = await fs.readFile(destinationPath, 'utf-8')
              const existingRegex = new RegExp(`${pattern.replace('$', '')}[a-zA-Z0-9]+`, 'g')
              existingIcons = existingContent.match(existingRegex) || []
            } catch {
              await fs.writeFile(
                destinationPath,
                `/* eslint-disable */\n/* prettier-ignore */\n// @ts-nocheck\n// noinspection JSUnusedGlobalSymbols\n// Generated by vite-plugin-auto-import-mdi-icons\n\n` +
                  `import {} from "@mdi/js"\n\n` +
                  `export default {}\n`,
              )
            }
            const existingIconsSet = new Set(existingIcons.map((icon) => '$' + icon))
            const hasNewIcons = newIcons.some((icon) => !existingIconsSet.has(icon))
            if (!hasNewIcons) return
            const icons = [...new Set([...existingIcons.map((icon) => '$' + icon), ...newIcons])]
              .sort()
              .map((icon) => icon.replace('$', ''))
            const content =
              `/* eslint-disable */\n/* prettier-ignore */\n// @ts-nocheck\n// noinspection JSUnusedGlobalSymbols\n// Generated by vite-plugin-auto-import-mdi-icons\n\n` +
              `import {\n\t${icons.join(',\n\t')}\n} from "@mdi/js"\n\n` +
              `export default {\n\t${icons.join(',\n\t')}\n}\n`
            await fs.writeFile(destinationPath, content)
            pluginLogger(`added: ${newIcons.join(', ')}`)
          }
        } catch (error) {
          console.error(`Error writing file at ${destinationPath}:`, error)
        }
      }
    } catch (error) {
      console.error(`Error reading file at ${sourcePath}:`, error)
    }
  }

  return {
    name: 'auto-import-mdi-icons',
    configResolved(resolvedConfig) {
      config = resolvedConfig
    },
    async handleHotUpdate({ file, server }) {
      await autoImportVuetifyMdiIcons(
        file,
        server.config.root + outputPath.replace(/^\.\//, '/') + outputFile,
      )
    },
    async buildStart() {
      const iconsPath = config.root + outputPath.replace(/^\.\//, '/') + outputFile

      async function scanDirectory(dir: string): Promise<void> {
        try {
          const entries = await fs.readdir(dir, { withFileTypes: true })

          for (const entry of entries) {
            const fullPath = dir + '/' + entry.name
            if (entry.isDirectory()) {
              await scanDirectory(fullPath)
            } else if (entry.isFile()) {
              await autoImportVuetifyMdiIcons(fullPath, iconsPath)
            }
          }
        } catch (error) {
          console.error(`Error scanning directory ${dir}:`, error)
        }
      }

      try {
        for (const dir of dirs) {
          const fullDir = config.root + '/' + dir.replace(/^\.\//, '')
          await scanDirectory(fullDir)
        }
      } catch (error) {
        console.error('Error during buildStart scan:', error)
      }
    },
  }
}
